#!/usr/bin/env ruby

if ARGV.empty?
  puts "Usage: byterotate FILE ROTATION"
  puts "  Rotates pictures taken by a Panasonic GF2 camera by changing as few bytes as possible"
  puts "  so that they are still viewable in the camera"
  puts
  puts "  ROTATION may be"
  puts "  'n' No rotation"
  puts "  'l' Left"
  puts "  'r' Right"
  puts "  'u' Upside down"
  exit
end

$data = IO.read(ARGV[0], 0xffff)

def check_contents_at!(offset, contents, description)
  return if check_contents_at(offset, contents)
  raise "#{description} not found at offset #{offset}"
end

def check_contents_at(offset, contents)
  size = contents.bytesize
  $data[offset, size] == contents
end

EXIF_ORIENTATION = "\x12\x01\x03\x00\x01\x00\x00\x00"

if check_contents_at(0x00c0, "DMC-GF2")
  orientation_offsets = [0x002e, 0x2380]
elsif check_contents_at(0x00c0, "DMC-GX80")
  orientation_offsets = [0x002e, 0x72ba]
elsif check_contents_at(0x00c4, "DSC-P12")
  orientation_offsets = [0x003a, 0x08d2]
else
  puts "Unrecognized camera model"
  exit 1
end

orientation_offsets.each do |o|
  check_contents_at!(o, EXIF_ORIENTATION, "image orientation")
end

ROTATION = {
  "n" => "\x00",
  "l" => "\x08",
  "r" => "\x06",
  "u" => "\x03",
}

rotation = ROTATION[ARGV[1]]

File.open(ARGV[0], "r+") do |f|
  orientation_offsets.each do |o|
    f.seek(o + 8, IO::SEEK_SET)
    f.write(rotation)
  end
end

def gwenview_reload
  service_line = `busctl --user`.lines.grep(/gwenview/).first
  return if service_line.nil?

  service = service_line.split.first
  system "busctl --user call #{service}" \
         " /gwenview/MainWindow_1/actions/reload" \
         " org.qtproject.Qt.QAction" \
         " trigger"
end

gwenview_reload
